[{"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\index.js":"1","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\App.js":"2","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\store.js":"3","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\NavigationBar.js":"4","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Welcome.js":"5","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Movie.js":"6","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\MovieList.js":"7","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Footer.js":"8","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\UserList.js":"9","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\rootReducer.js":"10","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\MovieToast.js":"11","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\userReducer.js":"12","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\userActions.js":"13","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\userTypes.js":"14","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Register.js":"15","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Login.js":"16","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\auth\\authReducer.js":"17","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\auth\\authTypes.js":"18","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\auth\\authActions.js":"19"},{"size":353,"mtime":1614728734988,"results":"20","hashOfConfig":"21"},{"size":1600,"mtime":1614829983772,"results":"22","hashOfConfig":"21"},{"size":219,"mtime":1614728734992,"results":"23","hashOfConfig":"21"},{"size":2804,"mtime":1614829983778,"results":"24","hashOfConfig":"21"},{"size":899,"mtime":1614728734987,"results":"25","hashOfConfig":"21"},{"size":10797,"mtime":1614729932023,"results":"26","hashOfConfig":"21"},{"size":9276,"mtime":1614728734985,"results":"27","hashOfConfig":"21"},{"size":585,"mtime":1614728734984,"results":"28","hashOfConfig":"21"},{"size":5982,"mtime":1614827484215,"results":"29","hashOfConfig":"21"},{"size":261,"mtime":1614825518759,"results":"30","hashOfConfig":"21"},{"size":943,"mtime":1614728734986,"results":"31","hashOfConfig":"21"},{"size":500,"mtime":1614728734994,"results":"32","hashOfConfig":"21"},{"size":819,"mtime":1614728734993,"results":"33","hashOfConfig":"21"},{"size":112,"mtime":1614728734994,"results":"34","hashOfConfig":"21"},{"size":5445,"mtime":1614824886914,"results":"35","hashOfConfig":"21"},{"size":4601,"mtime":1614829506751,"results":"36","hashOfConfig":"21"},{"size":574,"mtime":1614829178709,"results":"37","hashOfConfig":"21"},{"size":166,"mtime":1614828960704,"results":"38","hashOfConfig":"21"},{"size":766,"mtime":1614829428685,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1c4sln8",{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\index.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\App.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\store.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\NavigationBar.js",["82"],"import React, {useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {Navbar, Nav, FormControl, Button, Form, Image} from 'react-bootstrap'\r\nimport {Link} from \"react-router-dom\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faSignInAlt, faSignOutAlt, faUserPlus} from \"@fortawesome/free-solid-svg-icons\";\r\nimport {connect} from \"react-redux\";\r\nimport {logoutUser} from \"../services/user/auth/authActions\";\r\n\r\nconst NavigationBar = (props) => {\r\n    const [isFirstMount, setIsFirstMount] = useState(true);\r\n    const history = useHistory()\r\n\r\n    const handleSearch = (ev) => {\r\n        ev.preventDefault();\r\n        const searchQuery = document.getElementById(\"input\").value;\r\n        history.push(\"/list?search=\" + searchQuery);\r\n    }\r\n\r\n    const guestLinks = (\r\n        <Nav className=\"ml-auto\">\r\n            <Link to={\"register\"} className=\"nav-link\"><FontAwesomeIcon icon={faUserPlus}/> Register</Link>\r\n            <Link to={\"login\"} className=\"nav-link\"><FontAwesomeIcon icon={faSignInAlt}/> Login</Link>\r\n        </Nav>\r\n    );\r\n\r\n    const userLinks = (\r\n        <>\r\n            <Nav className=\"mr-auto\">\r\n                <Link to={\"/add\"} className=\"nav-link\">\r\n                    Add Movie\r\n                </Link>\r\n                <Link to={\"/list\"} className=\"nav-link\">\r\n                    Movie List\r\n                </Link>\r\n                <Link to={\"/users\"} className=\"nav-link\">\r\n                    User List\r\n                </Link>\r\n            </Nav>\r\n            <Form inline>\r\n                <Button variant=\"outline-info\" onClick={handleSearch}>Search</Button>\r\n                <FormControl onKeyPress={(ev) => ev.charCode === 13 && handleSearch(ev)} id=\"input\" type=\"text\" placeholder=\"Title Searching\" className=\"ml-2\"/>\r\n            </Form>\r\n            <Nav>\r\n                <Link to={\"/logout\"} className=\"nav-link ml-2\" onClick={props.logoutUser}>\r\n                    Logout{' '}\r\n                    <FontAwesomeIcon icon={faSignOutAlt}/>\r\n                </Link>\r\n            </Nav>\r\n        </>\r\n    );\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n            <Link to={\"\"} className=\"navbar-brand\">\r\n                <Image\r\n                    src=\"https://www.iconarchive.com/download/i61405/hadezign/hobbies/Movies.ico\"\r\n                    width=\"20\"\r\n                    className=\"mr-1\"\r\n                />\r\n                Movie Store\r\n            </Link>\r\n            {props.login.isLoggedIn ? userLinks : guestLinks}\r\n        </Navbar>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    login: state.auth\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    logoutUser: () => dispatch(logoutUser())\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationBar)","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Welcome.js",[],["83","84"],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Movie.js",["85"],"import React, {useState, useEffect} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {Link} from \"react-router-dom\";\r\nimport axios from 'axios'\r\n\r\nimport {Card, Form, Button, Col} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faList, faPlusSquare, faSave, faUndo, faEdit} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nimport MovieToast from \"./MovieToast\";\r\nimport \"./Style.css\"\r\n\r\nconst Movie = (props) => {\r\n    const initialState = {\r\n        id: \"\",\r\n        title: \"\",\r\n        genre: \"\",\r\n        imgCoverLink: \"\",\r\n        dateRelease: \"\",\r\n        description: \"\",\r\n        director: \"\",\r\n        runtime: 0,\r\n        rating: 1\r\n    }\r\n\r\n    const [state, setState] = useState(initialState)\r\n    const [toastShowState, setToastShowState] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const movie = {\r\n        title: state.title,\r\n        genre: state.genre,\r\n        imgCoverLink: state.imgCoverLink,\r\n        dateRelease: state.dateRelease,\r\n        description: state.description,\r\n        director: state.director,\r\n        runtime: state.runtime,\r\n        rating: state.rating\r\n    }\r\n\r\n    useEffect(() => {\r\n        const movieId = +props.match.params.id\r\n        axios.get(\"http://localhost:8080/api/movies/\" + movieId)\r\n            .then(res => res.data)\r\n            .then(data => {\r\n                if (data != null) {\r\n                    setState(data)\r\n                }\r\n            })\r\n            .catch(() => {\r\n                setState(initialState)\r\n            })\r\n    }, [props.match.params.id])\r\n\r\n    const submitMovie = async ev => {\r\n        ev.preventDefault();\r\n\r\n        axios.post(\"http://localhost:8080/api/movies\", movie)\r\n            .then(res => {\r\n                if (res.data != null) {\r\n                    setToastShowState(true)\r\n                    setTimeout(() => {\r\n                        setToastShowState(false)\r\n                        history.push(\"/list\")\r\n                    }, 1500)\r\n                }\r\n            })\r\n    }\r\n\r\n    const UpdateMovie = ev => {\r\n        ev.preventDefault()\r\n        const putMovie = {\r\n            id: state.id,\r\n            title: state.title,\r\n            genre: state.genre,\r\n            imgCoverLink: state.imgCoverLink,\r\n            dateRelease: state.dateRelease,\r\n            description: state.description,\r\n            director: state.director,\r\n            runtime: state.runtime,\r\n            rating: state.rating\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/movies/\", putMovie)\r\n            .then(res => {\r\n                if (res.data != null) {\r\n                    setToastShowState(true);\r\n                    setTimeout(() => {\r\n                        setToastShowState(false)\r\n                        history.push(\"/list\")\r\n                    }, 1500)\r\n                    //\r\n                }\r\n            })\r\n    }\r\n\r\n    const resetMovie = () => {\r\n        setState(initialState)\r\n    }\r\n\r\n    const movieChangeAction = ev => {\r\n        setState({...state, [ev.target.name]: ev.target.value})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MovieToast\r\n                show={toastShowState}\r\n                message= {`Movie ${state.id !== \"\" ? 'Updated' : 'Saved'} Successfully.`}\r\n                type={ \"success\"}\r\n            />\r\n\r\n            <Card className=\"bg-dark text-white border border-dark\">\r\n            <Form onReset={resetMovie} onSubmit={state.id !== \"\" ? UpdateMovie : submitMovie} id=\"movieFormId\">\r\n                <Card.Header>\r\n                    <FontAwesomeIcon className=\"mr-2\" icon={state.id !== \"\" ? faEdit : faPlusSquare}/>{state.id !== \"\" ? \"Update Movie\" : \"Add New Movie\"}\r\n                </Card.Header>\r\n                <Card.Body>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"title\"\r\n                                          value={state.title}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"text\"\r\n                                          placeholder=\"Enter movie title\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Genre</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"genre\"\r\n                                          value={state.genre}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"text\"\r\n                                          placeholder=\"Enter movie genre\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Cover Image URL</Form.Label>\r\n                            <Form.Control\r\n                                name=\"imgCoverLink\"\r\n                                value={state.imgCoverLink}\r\n                                onChange={movieChangeAction}\r\n                                type=\"text\"\r\n                                placeholder=\"Enter url ending (.png, .jpg, ...)\"\r\n                                className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Date Release</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"dateRelease\"\r\n                                          value={state.dateRelease}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"date\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Movie description</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"description\"\r\n                                          value={state.description}\r\n                                          onChange={movieChangeAction}\r\n                                          as=\"textarea\"\r\n                                          rows={2}\r\n                                          placeholder=\"Enter short movie description\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Director</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"director\"\r\n                                          value={state.director}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"text\"\r\n                                          placeholder=\"Enter movie director\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Runtime (in mins)</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"runtime\"\r\n                                          value={state.runtime}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"number\"\r\n                                          placeholder=\"Enter movie runtime\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Rating</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"rating\"\r\n                                          value={state.rating}\r\n                                          onChange={movieChangeAction}\r\n                                          as=\"select\"\r\n                                          className=\"bg-dark text-white\"\r\n                                          placeholder=\"Enter movie rating\"\r\n                            >\r\n                                <option value={1}>1</option>\r\n                                <option value={2}>2</option>\r\n                                <option value={3}>3</option>\r\n                                <option value={4}>4</option>\r\n                                <option value={5}>5</option>\r\n                                <option value={6}>6</option>\r\n                                <option value={7}>7</option>\r\n                                <option value={8}>8</option>\r\n                                <option value={9}>9</option>\r\n                                <option value={10}>10</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col}/>\r\n                    </Form.Row>\r\n\r\n                </Card.Body>\r\n                <Card.Footer style={{textAlign: \"right\"}}>\r\n                    <Button size=\"sm\" variant=\"outline-success\" type=\"submit\" className=\"mr-2\">\r\n                        <FontAwesomeIcon className=\"mr-2\" icon={faSave}/>{state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                    </Button>\r\n                    <Button size=\"sm\" variant=\"outline-info\" type=\"reset\" className=\"mr-2\">\r\n                        <FontAwesomeIcon className=\"mr-2\" icon={faUndo}/>Reset\r\n                    </Button>\r\n                    <Link to={\"/list\"}>\r\n                        <Button size=\"sm\" variant=\"outline-info\" type=\"reset\">\r\n                            <FontAwesomeIcon className=\"mr-2\" icon={faList}/>Movie List\r\n                        </Button>\r\n                    </Link>\r\n                </Card.Footer>\r\n            </Form>\r\n        </Card>\r\n</div>\r\n);\r\n};\r\n\r\nexport default Movie;","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\MovieList.js",["86"],"import React, {useEffect, useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nimport {Button, ButtonGroup, Card, FormControl, Image, InputGroup, Table} from \"react-bootstrap\"\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\r\nimport {\r\n    faList,\r\n    faEdit,\r\n    faTrash,\r\n    faFastBackward,\r\n    faStepBackward,\r\n    faStepForward,\r\n    faFastForward\r\n} from \"@fortawesome/free-solid-svg-icons\"\r\nimport MovieToast from \"./MovieToast\";\r\nimport \"./Style.css\"\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst MovieList = () => {\r\n    const [state, setState] = useState({\r\n        movies: [],\r\n        currentPage: 1,\r\n        moviesPerPage: 5,\r\n        totalPages: 1,\r\n        sort: {\r\n            sortedBy: \"title\",\r\n            sortedAsc: true\r\n        }\r\n    })\r\n\r\n    const initialSortArrow = {\r\n        title: true,\r\n        genre: false,\r\n        rating: false,\r\n        director: false,\r\n        dateRelease: false,\r\n        runtime: false\r\n    }\r\n    const [sortArrow, setSortArrow] = useState(initialSortArrow)\r\n\r\n    const {movies, currentPage, moviesPerPage, sort, totalPages} = state\r\n    const [showToastState, setShowToastState] = useState(false)\r\n\r\n    const getPages = () => {\r\n        let searchQuery = new URLSearchParams(window.location.search).get('search')\r\n        if(searchQuery == null)\r\n            searchQuery = \"\"\r\n\r\n        let sortDir = sort.sortedAsc ? \"asc\" : \"desc\"\r\n\r\n        axios.get(\"http://localhost:8080/api/movies/options?\" +\r\n                \"search=\" +  searchQuery + \"&\" +\r\n                \"page=\" + currentPage + \"&\" +\r\n                \"size=\" + moviesPerPage + \"&\" +\r\n                \"sort=\" + sort.sortedBy + \",\" + sortDir)\r\n            .then(res => res.data)\r\n            .then(data => {\r\n                setState({...state,\r\n                    movies: data.content,\r\n                    totalPages: data.totalPages\r\n                })\r\n            })\r\n    }\r\n\r\n    const setSortData = async (sortBy) => {\r\n        initialSortArrow[\"title\"] = false\r\n        initialSortArrow[sortBy] = true\r\n        setSortArrow(initialSortArrow)\r\n        // initialSortArrow[sortBy] = false\r\n    }\r\n\r\n    const sortData = (sortedBy) => {\r\n        setSortData(sortedBy).then(() => {\r\n            setState({\r\n                ...state,\r\n                sort:{\r\n                    sortedBy: sortedBy,\r\n                    sortedAsc: !sort.sortedAsc\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPages()\r\n    }, [currentPage, sort, window.location.search])\r\n\r\n    const onClickDeleteMovie = (movieId) => {\r\n        axios.delete(\"http://localhost:8080/api/movies/\" + movieId)\r\n            .then(res => res.data)\r\n            .then(data => {\r\n                if(data != null) {\r\n                    setShowToastState(true);\r\n                    setTimeout(() => setShowToastState(false), 3000)\r\n                    getPages()\r\n                }\r\n            })\r\n\r\n    }\r\n\r\n    const firstPage = () => {\r\n        setState({...state, currentPage: 1})\r\n    }\r\n\r\n    const prevPage = () => {\r\n        setState({...state, currentPage: currentPage - 1})\r\n    }\r\n\r\n    const changePage = ev => {\r\n        if(ev.target.value.match(/\\D/g) != null) {\r\n            ev.target.value.replace(/\\D/g, \"\")\r\n            return\r\n        }\r\n        setState({...state, currentPage: ev.target.value})\r\n    }\r\n\r\n    const nextPage = () => {\r\n        setState({...state, currentPage: state.currentPage + 1})\r\n    }\r\n\r\n    const lastPage = () => {\r\n        setState({...state, currentPage: totalPages})\r\n    }\r\n\r\n    const sortArrowDirection = sort.sortedAsc ? \"arrow-down\" : \"arrow-up\"\r\n\r\n    return (\r\n        <div>\r\n            <MovieToast\r\n                show={showToastState}\r\n                message={ \"Movie Deleted Successfully.\"}\r\n                type={ \"danger\"}\r\n            />\r\n            <Card className=\"bg-dark text-white border border-dark\">\r\n                <Card.Header>\r\n                    <FontAwesomeIcon className=\"mr-2\" icon={faList}/>Movie List\r\n\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Table striped bordered hover variant=\"dark\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th onClick={() => sortData(\"title\")}>Title<div className={`arrow ${sortArrow.title ? \"enable-arrow\" : \"disable-arrow\"} ${sortArrowDirection}`}/></th>\r\n                            <th onClick={() => sortData(\"genre\")}>Genre<div className={`arrow ${sortArrow.genre ? \"enable-arrow\" : \"disable-arrow\"} ${sortArrowDirection}`}/></th>\r\n                            <th onClick={() => sortData(\"rating\")}>Rating<div className={`arrow ${sortArrow.rating ? \"enable-arrow\" : \"disable-arrow\"} ${sortArrowDirection}`}/></th>\r\n                            <th onClick={() => sortData(\"director\")}>Director<div className={`arrow ${sortArrow.director ? \"enable-arrow\" : \"disable-arrow\"} ${sortArrowDirection}`}/></th>\r\n                            <th onClick={() => sortData(\"dateRelease\")}>Date Release<div className={`arrow ${sortArrow.dateRelease ? \"enable-arrow\" : \"disable-arrow\"} ${sortArrowDirection}`}/></th>\r\n                            <th onClick={() => sortData(\"runtime\")}>Runtime<div className={`arrow ${sortArrow.runtime ? \"enable-arrow\" : \"disable-arrow\"} ${sortArrowDirection}`}/></th>\r\n                            <th>Actions</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {\r\n                            state.length === 0 ?\r\n                                <tr><td colSpan={7}>No movies available.</td></tr>\r\n                                :\r\n                                movies.map(movie => (\r\n                                    <tr key={movie.id}>\r\n                                        <td>\r\n                                            <Image\r\n                                                src={movie.imgCoverLink}\r\n                                                roundedCircle\r\n                                                width={25}\r\n                                                height={25}\r\n                                                className=\"mr-2\"\r\n                                            />\r\n                                            {movie.title}\r\n                                        </td>\r\n                                        <td>{movie.genre}</td>\r\n                                        <td>{movie.rating}</td>\r\n                                        <td>{movie.director}</td>\r\n                                        <td>{movie.dateRelease}</td>\r\n                                        <td>{movie.runtime}</td>\r\n                                        <td>\r\n                                            <ButtonGroup>\r\n                                                <Link to={\"edit/\" + movie.id} className=\"btn btn-sm btn-outline-primary mr-2\"><FontAwesomeIcon icon={faEdit} /></Link>\r\n                                                <Button size=\"sm\" variant=\"outline-danger\" onClick={onClickDeleteMovie.bind(this, movie.id)}><FontAwesomeIcon icon={faTrash} /></Button>\r\n                                            </ButtonGroup>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))\r\n                        }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <div style={{float: \"left\"}}>\r\n                        Showing Page {currentPage} of {totalPages}\r\n                    </div>\r\n                    <div style={{float: \"right\"}}>\r\n                        <InputGroup size=\"sm\">\r\n                            <InputGroup.Prepend>\r\n                                <Button type=\"button\" variant=\"outline-info\" disabled={currentPage === 1} onClick={firstPage}>\r\n                                    <FontAwesomeIcon icon={faFastBackward} /> First\r\n                                </Button>\r\n                                <Button type=\"button\" variant=\"outline-info\" disabled={currentPage === 1} onClick={prevPage}>\r\n                                    <FontAwesomeIcon icon={faStepBackward} /> Prev\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl className={\"bg-dark page-num\"} value={currentPage} onChange={changePage}/>\r\n                            <InputGroup.Append>\r\n                                <Button type=\"button\" variant=\"outline-info\" disabled={currentPage === totalPages} onClick={nextPage}>\r\n                                    <FontAwesomeIcon icon={faStepForward} /> Next\r\n                                </Button>\r\n                                <Button type=\"button\" variant=\"outline-info\" disabled={currentPage === totalPages} onClick={lastPage}>\r\n                                    <FontAwesomeIcon icon={faFastForward} /> Last\r\n                                </Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </div>\r\n                </Card.Footer>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MovieList;","C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Footer.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\UserList.js",["87"],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\rootReducer.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\MovieToast.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\userReducer.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\userActions.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\userTypes.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Register.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\components\\Login.js",["88"],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\auth\\authReducer.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\auth\\authTypes.js",[],"C:\\Users\\benja\\Projects\\MovieStore\\src\\main\\webapp\\reactjs\\src\\services\\user\\auth\\authActions.js",[],{"ruleId":"89","severity":1,"message":"90","line":60,"column":8,"nodeType":"91","endLine":60,"endColumn":32,"suggestions":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"89","severity":1,"message":"97","line":53,"column":8,"nodeType":"91","endLine":53,"endColumn":31,"suggestions":"98"},{"ruleId":"89","severity":1,"message":"99","line":86,"column":8,"nodeType":"91","endLine":86,"endColumn":51,"suggestions":"100"},{"ruleId":"89","severity":1,"message":"101","line":26,"column":8,"nodeType":"91","endLine":26,"endColumn":10,"suggestions":"102"},{"ruleId":"89","severity":1,"message":"103","line":45,"column":8,"nodeType":"91","endLine":45,"endColumn":32,"suggestions":"104"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'isFirstMount'. Either include them or remove the dependency array.","ArrayExpression",["105"],"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"React Hook useEffect has a missing dependency: 'initialState'. Either include it or remove the dependency array.",["108"],"React Hook useEffect has a missing dependency: 'getPages'. Either include it or remove the dependency array. Outer scope values like 'window.location.search' aren't valid dependencies because mutating them doesn't re-render the component.",["109"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["110"],"React Hook useEffect has missing dependencies: 'isFirstMount', 'props.history', 'resetLoginForm', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["111"],{"desc":"112","fix":"113"},"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [history, isFirstMount, props.login.isLoggedIn]",{"range":"122","text":"123"},"Update the dependencies array to be: [initialState, props.match.params.id]",{"range":"124","text":"125"},"Update the dependencies array to be: [currentPage, getPages, sort]",{"range":"126","text":"127"},"Update the dependencies array to be: [props]",{"range":"128","text":"129"},"Update the dependencies array to be: [isFirstMount, props.history, props.login.isLoggedIn, resetLoginForm, state]",{"range":"130","text":"131"},[2277,2301],"[history, isFirstMount, props.login.isLoggedIn]",[1581,1604],"[initialState, props.match.params.id]",[2501,2544],"[currentPage, getPages, sort]",[884,886],"[props]",[1364,1388],"[isFirstMount, props.history, props.login.isLoggedIn, resetLoginForm, state]"]