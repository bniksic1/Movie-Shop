[{"C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\index.js":"1","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\App.js":"2","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\Welcome.js":"3","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\MovieList.js":"4","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\Movie.js":"5","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\UserList.js":"6","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\NavigationBar.js":"7","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\Footer.js":"8","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\MovieToast.js":"9"},{"size":220,"mtime":1614111912749,"results":"10","hashOfConfig":"11"},{"size":1208,"mtime":1609681128662,"results":"12","hashOfConfig":"11"},{"size":898,"mtime":1609283555825,"results":"13","hashOfConfig":"11"},{"size":9276,"mtime":1614270869355,"results":"14","hashOfConfig":"11"},{"size":10790,"mtime":1614129812816,"results":"15","hashOfConfig":"11"},{"size":4889,"mtime":1609685304075,"results":"16","hashOfConfig":"11"},{"size":1580,"mtime":1614271594835,"results":"17","hashOfConfig":"11"},{"size":585,"mtime":1609588850324,"results":"18","hashOfConfig":"11"},{"size":943,"mtime":1609632012111,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"avovos",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\index.js",[],["41","42"],"C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\App.js",[],"C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\Welcome.js",[],"C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\MovieList.js",["43"],"C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\Movie.js",["44"],"import React, {useState, useEffect} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport axios from 'axios'\r\n\r\nimport \"./Style.css\"\r\n\r\n\r\nimport {Card, Form, Button, Col} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faList, faPlusSquare, faSave, faUndo, faEdit} from \"@fortawesome/free-solid-svg-icons\";\r\nimport MovieToast from \"./MovieToast\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Movie = (props) => {\r\n    const initialState = {\r\n        id: \"\",\r\n        title: \"\",\r\n        genre: \"\",\r\n        imgCoverLink: \"\",\r\n        dateRelease: \"\",\r\n        description: \"\",\r\n        director: \"\",\r\n        runtime: 0,\r\n        rating: 1\r\n    }\r\n\r\n    const [state, setState] = useState(initialState)\r\n    const [toastShowState, setToastShowState] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const movie = {\r\n        title: state.title,\r\n        genre: state.genre,\r\n        imgCoverLink: state.imgCoverLink,\r\n        dateRelease: state.dateRelease,\r\n        description: state.description,\r\n        director: state.director,\r\n        runtime: state.runtime,\r\n        rating: state.rating\r\n    }\r\n\r\n    useEffect(() => {\r\n        const movieId = +props.match.params.id\r\n        axios.get(\"http://localhost:8080/api/movies/\" + movieId)\r\n            .then(res => res.data)\r\n            .then(data => {\r\n                if (data != null) {\r\n                    setState(data)\r\n                }\r\n            })\r\n            .catch(() => {\r\n                setState(initialState)\r\n            })\r\n    }, [props.match.params.id])\r\n\r\n    const submitMovie = ev => {\r\n        ev.preventDefault()\r\n        axios.post(\"http://localhost:8080/api/movies\", movie)\r\n            .then(res => {\r\n                if (res.data != null) {\r\n                    setToastShowState(true)\r\n                    setTimeout(() => {\r\n                        setToastShowState(false)\r\n                        history.push(\"/list\")\r\n                    }, 1500)\r\n                }\r\n            })\r\n    }\r\n\r\n    const UpdateMovie = ev => {\r\n        ev.preventDefault()\r\n        const putMovie = {\r\n            id: state.id,\r\n            title: state.title,\r\n            genre: state.genre,\r\n            imgCoverLink: state.imgCoverLink,\r\n            dateRelease: state.dateRelease,\r\n            description: state.description,\r\n            director: state.director,\r\n            runtime: state.runtime,\r\n            rating: state.rating\r\n        }\r\n\r\n        axios.put(\"http://localhost:8080/api/movies/\", putMovie)\r\n            .then(res => {\r\n                if (res.data != null) {\r\n                    setToastShowState(true);\r\n                    setTimeout(() => {\r\n                        setToastShowState(false)\r\n                        history.push(\"/list\")\r\n                    }, 1500)\r\n                    //\r\n                }\r\n            })\r\n    }\r\n\r\n    const resetMovie = () => {\r\n        setState(initialState)\r\n    }\r\n\r\n    const movieChangeAction = ev => {\r\n        setState({...state, [ev.target.name]: ev.target.value})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <MovieToast\r\n                show={toastShowState}\r\n                message= {`Movie ${state.id !== \"\" ? 'Updated' : 'Saved'} Successfully.`}\r\n                type={ \"success\"}\r\n            />\r\n\r\n            <Card className=\"bg-dark text-white border border-dark\">\r\n            <Form onReset={resetMovie} onSubmit={state.id !== \"\" ? UpdateMovie : submitMovie} id=\"movieFormId\">\r\n                <Card.Header>\r\n                    <FontAwesomeIcon className=\"mr-2\" icon={state.id !== \"\" ? faEdit : faPlusSquare}/>{state.id !== \"\" ? \"Update Movie\" : \"Add New Movie\"}\r\n                </Card.Header>\r\n                <Card.Body>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Title</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"title\"\r\n                                          value={state.title}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"text\"\r\n                                          placeholder=\"Enter movie title\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Genre</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"genre\"\r\n                                          value={state.genre}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"text\"\r\n                                          placeholder=\"Enter movie genre\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Cover Image URL</Form.Label>\r\n                            <Form.Control\r\n                                name=\"imgCoverLink\"\r\n                                value={state.imgCoverLink}\r\n                                onChange={movieChangeAction}\r\n                                type=\"text\"\r\n                                placeholder=\"Enter url ending (.png, .jpg, ...)\"\r\n                                className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Date Release</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"dateRelease\"\r\n                                          value={state.dateRelease}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"date\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Movie description</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"description\"\r\n                                          value={state.description}\r\n                                          onChange={movieChangeAction}\r\n                                          as=\"textarea\"\r\n                                          rows={2}\r\n                                          placeholder=\"Enter short movie description\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Director</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"director\"\r\n                                          value={state.director}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"text\"\r\n                                          placeholder=\"Enter movie director\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Runtime (in mins)</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"runtime\"\r\n                                          value={state.runtime}\r\n                                          onChange={movieChangeAction}\r\n                                          type=\"number\"\r\n                                          placeholder=\"Enter movie runtime\"\r\n                                          className=\"bg-dark text-white\"\r\n                            />\r\n                        </Form.Group>\r\n                    </Form.Row>\r\n\r\n                    <Form.Row>\r\n                        <Form.Group as={Col}>\r\n                            <Form.Label>Rating</Form.Label>\r\n                            <Form.Control required\r\n                                          name=\"rating\"\r\n                                          value={state.rating}\r\n                                          onChange={movieChangeAction}\r\n                                          as=\"select\"\r\n                                          className=\"bg-dark text-white\"\r\n                                          placeholder=\"Enter movie rating\"\r\n                            >\r\n                                <option value={1}>1</option>\r\n                                <option value={2}>2</option>\r\n                                <option value={3}>3</option>\r\n                                <option value={4}>4</option>\r\n                                <option value={5}>5</option>\r\n                                <option value={6}>6</option>\r\n                                <option value={7}>7</option>\r\n                                <option value={8}>8</option>\r\n                                <option value={9}>9</option>\r\n                                <option value={10}>10</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group as={Col}/>\r\n                    </Form.Row>\r\n\r\n                </Card.Body>\r\n                <Card.Footer style={{textAlign: \"right\"}}>\r\n                    <Button size=\"sm\" variant=\"outline-success\" type=\"submit\" className=\"mr-2\">\r\n                        <FontAwesomeIcon className=\"mr-2\" icon={faSave}/>{state.id !== \"\" ? \"Update\" : \"Save\"}\r\n                    </Button>\r\n                    <Button size=\"sm\" variant=\"outline-info\" type=\"reset\" className=\"mr-2\">\r\n                        <FontAwesomeIcon className=\"mr-2\" icon={faUndo}/>Reset\r\n                    </Button>\r\n                    <Link to={\"/list\"}>\r\n                        <Button size=\"sm\" variant=\"outline-info\" type=\"reset\">\r\n                            <FontAwesomeIcon className=\"mr-2\" icon={faList}/>Movie List\r\n                        </Button>\r\n                    </Link>\r\n                </Card.Footer>\r\n            </Form>\r\n        </Card>\r\n</div>\r\n);\r\n};\r\n\r\nexport default Movie;","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\UserList.js",["45"],"import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport {Button, Card, FormControl, InputGroup, Table} from \"react-bootstrap\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\nimport {faFastBackward, faFastForward, faStepBackward, faStepForward, faUsers} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./Style.css\"\r\n\r\nconst UserList = () => {\r\n\r\n    const [state, setState] = useState({\r\n        users: [],\r\n        currentPage: 1,\r\n        usersPerPage: 5\r\n    })\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://randomapi.com/api/6de6abfedb24f889e0b5f675edc50deb?fmt=raw&sole\")\r\n            .then(res => res.data)\r\n            .then(data => {\r\n                setState({...state, users: data})\r\n            })\r\n    }, [])\r\n\r\n    const {users, currentPage, usersPerPage} = state\r\n\r\n    const lastIndex = currentPage * usersPerPage\r\n    const firstIndex = lastIndex - usersPerPage\r\n    const currentUsers = users.slice(firstIndex, lastIndex)\r\n    const totalPages = users.length / usersPerPage\r\n\r\n    const firstPage = () => {\r\n        setState({...state, currentPage: 1})\r\n    }\r\n\r\n    const prevPage = () => {\r\n        setState({...state, currentPage: currentPage - 1})\r\n    }\r\n\r\n    const changePage = ev => {\r\n        setState({...state, currentPage: ev.target.value})\r\n    }\r\n\r\n    const nextPage = () => {\r\n        setState({...state, currentPage: currentPage + 1})\r\n    }\r\n\r\n    const lastPage = () => {\r\n        setState({...state, currentPage: totalPages})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className=\"bg-dark text-white border border-dark\">\r\n                <Card.Header>\r\n                    <FontAwesomeIcon className=\"mr-2\" icon={faUsers}/>User List\r\n                </Card.Header>\r\n                <Card.Body>\r\n                    <Table striped bordered hover variant=\"dark\">\r\n                        <thead>\r\n                        <tr>\r\n                            <th>Name</th>\r\n                            <th>Email</th>\r\n                            <th>Address</th>\r\n                            <th>Created</th>\r\n                            <th>Balance</th>\r\n                        </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                        {users.length === 0 ?\r\n                            <tr align=\"center\">\r\n                                <td colSpan={5}> No Users Available</td>\r\n                            </tr> :\r\n                            currentUsers.map((user, index) => (\r\n                                <tr key={index}>\r\n                                    <td>{user.first}{' '}{user.last}</td>\r\n                                    <td>{user.email}</td>\r\n                                    <td>{user.address}</td>\r\n                                    <td>{user.created}</td>\r\n                                    <td>{user.balance}</td>\r\n                                </tr>\r\n                            ))\r\n                        }\r\n                        </tbody>\r\n                    </Table>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                    <div style={{float: \"left\"}}>\r\n                        Showing Page {currentPage} of {totalPages}\r\n                    </div>\r\n                    <div style={{float: \"right\"}}>\r\n                        <InputGroup size=\"sm\">\r\n                            <InputGroup.Prepend>\r\n                                <Button type=\"button\" variant=\"outline-info\" disabled={currentPage === 1 } onClick={firstPage}>\r\n                                    <FontAwesomeIcon icon={faFastBackward} /> First\r\n                                </Button>\r\n                                <Button type=\"button\" variant=\"outline-info\" disabled={currentPage === 1 } onClick={prevPage}>\r\n                                    <FontAwesomeIcon icon={faStepBackward} /> Prev\r\n                                </Button>\r\n                            </InputGroup.Prepend>\r\n                            <FormControl className={\"bg-dark page-num\"} value={currentPage} onChange={changePage}/>\r\n                            <InputGroup.Append>\r\n                                <Button type=\"button\" variant=\"outline-info\" disabled={currentPage === totalPages } onClick={nextPage}>\r\n                                    <FontAwesomeIcon icon={faStepForward} /> Next\r\n                                </Button>\r\n                                <Button type=\"button\" variant=\"outline-info\" disabled={currentPage === totalPages } onClick={lastPage}>\r\n                                    <FontAwesomeIcon icon={faFastForward} /> Last\r\n                                </Button>\r\n                            </InputGroup.Append>\r\n                        </InputGroup>\r\n                    </div>\r\n                </Card.Footer>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserList","C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\NavigationBar.js",[],"C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\Footer.js",[],"C:\\Users\\benja\\Projects\\springReactJS\\src\\main\\webapp\\reactjs\\src\\components\\MovieToast.js",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":86,"column":8,"nodeType":"52","endLine":86,"endColumn":51,"suggestions":"53"},{"ruleId":"50","severity":1,"message":"54","line":54,"column":8,"nodeType":"52","endLine":54,"endColumn":31,"suggestions":"55"},{"ruleId":"50","severity":1,"message":"56","line":22,"column":8,"nodeType":"52","endLine":22,"endColumn":10,"suggestions":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPages'. Either include it or remove the dependency array. Outer scope values like 'window.location.search' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["60"],"React Hook useEffect has a missing dependency: 'initialState'. Either include it or remove the dependency array.",["61"],"React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [currentPage, getPages, sort]",{"range":"69","text":"70"},"Update the dependencies array to be: [initialState, props.match.params.id]",{"range":"71","text":"72"},"Update the dependencies array to be: [state]",{"range":"73","text":"74"},[2501,2544],"[currentPage, getPages, sort]",[1583,1606],"[initialState, props.match.params.id]",[773,775],"[state]"]